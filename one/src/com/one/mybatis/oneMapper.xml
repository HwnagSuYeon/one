<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.one.mybatis.SHSMapper.xml">
	<select id="bestList" resultType="com.one.dto.ProductDTO">
		<!-- resultType=DB에서 받아오는 타입. 경로문제때문에 현업에서는 앨리어스대신 경로 그대로를 쓴다. -->
		<![CDATA[
			SELECT *
			FROM (SELECT * FROM tbl_product
			ORDER BY p_like DESC)
			WHERE ROWNUM <=4
		]]>
	</select>
	<select id="newList" resultType="com.one.dto.ProductDTO">
		<![CDATA[
			SELECT *
			FROM (SELECT * FROM tbl_product
			ORDER BY p_indate DESC)
			WHERE ROWNUM <=4
		]]>
	</select>
	<!-- 21. 매개변수로 전달받은 id값을 sql문에 바인딩 변수로 넣고 sql문 실행(DB로 이동) -->
	<select id="idCheck" parameterType="String" resultType="String">
		<!-- DB에서 받아오는 id값은 1개이기때문에 반환타입(result type)은 String -->
		SELECT id FROM tbl_member
		WHERE id = #{id}
	</select>

	<select id="loginCheck" parameterType="com.one.dto.MemberDTO"
		resultType="com.one.dto.MemberDTO">
		SELECT * FROM tbl_member
		WHERE id = #{id} AND pw = #{pw}
	</select>

	<insert id="memInsert" parameterType="com.one.dto.MemberDTO">
		INSERT INTO tbl_member(id,
		pw, name, phone, zipcode, addr1, addr2)
		VALUES(#{id}, #{pw}, #{name},
		#{phone}, #{zipcode}, #{addr1}, #{addr2})
	</insert>

	<update id="memUpdate" parameterType="com.one.dto.MemberDTO">
		UPDATE tbl_member SET
		name =
		#{name},
		phone = #{phone},
		zipcode = #{zipcode},
		addr1 = #{addr1},
		addr2 =
		#{addr2}
		WHERE id = #{id}
	</update>

	<select id="memOne" parameterType="String"
		resultType="com.one.dto.MemberDTO">
		SELECT * FROM tbl_member
		WHERE id=#{id}
	</select>

	<select id="pwCheck" parameterType="hashmap" resultType="int">
		<!-- SELECT * FROM으로 쓰지 않은이유는 int타입으로 반환받기위해서. id와 pw값을 둘다 만족시키는 1건의 결과를 
			숫자로(true,false)받기위해 COUNT로 검색한다. -->
		SELECT COUNT(*) FROM tbl_member
		WHERE id = #{id} AND pw = #{pw}
	</select>

	<update id="pwUpdate" parameterType="hashmap">
		UPDATE tbl_member SET
		pw =
		#{pw}
		WHERE id = #{id}
	</update>

	<delete id="memDelete" parameterType="String">
		DELETE FROM tbl_member
		WHERE id = #{id}
	</delete>


	<!-- 게시판 -->
	<select id="totalCount" resultType="int">
		SELECT COUNT (bno)
		FROM tbl_board
		WHERE bno > 0
		<if test="search_option == 1">
			AND title LIKE '%' || #{keyword} || '%'
		</if>
		<if test="search_option == 2">
			AND writer LIKE '%' || #{keyword} || '%'content LIKE '%' || #{keyword}
			|| '%'
		</if>
		<if test="search_option == 3">
			AND title LIKE '%' || #{keyword} || '%' OR content LIKE '%' ||
			#{keyword}
		</if>
		<if test="search_option == 4">
			AND writer LIKE '%' || #{keyword} || '%'
		</if>
	</select>


	<select id="listAll" resultType="com.one.dto.BoardDTO">
		SELECT *
		FROM (SELECT rownum rnum, a.*
		FROM (SELECT *
		FROM tbl_board
		WHERE bno > 0
		<if test="search_option == 1">
			AND title LIKE '%' || #{keyword} || '%'
		</if>
		<if test="search_option == 2">
			AND writer LIKE '%' || #{keyword} || '%'content LIKE '%' || #{keyword}
			|| '%'
		</if>
		<if test="search_option == 3">
			AND title LIKE '%' || #{keyword} || '%' OR content LIKE '%' ||
			#{keyword}
		</if>
		<if test="search_option == 4">
			AND writer LIKE '%' || #{keyword} || '%'
		</if>

		<if test="sort_type == 'new'">
			ORDER BY bno DESC
		</if>
		<if test="sort_type == 'good'">
			ORDER BY goodcnt DESC, bno DESC
		</if>
		<if test="sort_type == 'reply'">
			ORDER BY replycnt DESC, bno DESC
		</if>
		<if test="sort_type == 'view'">
			ORDER BY viewcnt DESC, bno DESC
		</if>
		) a
		) WHERE rnum BETWEEN #{pageStart} AND #{perPageNum}
	</select>
	<!-- #{pageStart} AND #{perPageNum} -> 매개변수로 criteriaDTO criDto를 보냈으므로 본 
		바인딩변수는 getPageStart() 혹은 setPageStart로 인식을한다. SQL문은 SELECT이므로 get으로 인식했고, 
		getpageStart()를 실행하기 위해 criteriaDTO클래스 내로 찾아감. -->
	<!-- 서브쿼리문: 가장 안쪽괄호의 실행결과 -> 전체 게시글 최신순으로 조회(a라는 이름을 붙여줌) : 두번째 괄호안의 실행 
		결과-> 전체 게시글에서 rownum 컬럼 추가 : 마지막 괄호실행결과 -> rnum의 결과값중 pageStart부터 perPageNum까지만 
		결과 출력.즉, 조회된결과중 page에 출력할 10건에 게시글만 조회 -->
		
	<select id="view" parameterType="String" resultType="com.one.dto.BoardDTO">
		SELECT * FROM tbl_board
		WHERE bno = #{bno}
	</select>
	
	<update id="viewCnt" parameterType="String">
		UPDATE tbl_board
		   SET viewcnt = viewcnt +1
		WHERE bno = #{bno}
	</update>
	
	<select id="replyList" parameterType="String" resultType="com.one.dto.ReplyDTO">
		SELECT * FROM tbl_reply
		WHERE bno = #{bno}
	</select>
	
	<insert id="replyAdd" parameterType="com.one.dto.ReplyDTO">
		INSERT INTO tbl_reply(rno,content, writer, bno)
		VALUES(seq_reply.NEXTVAL, #{content}, #{writer}, #{bno})
	</insert>
	
	<delete id="replyRemove" parameterType="int">
		DELETE FROM tbl_reply
		WHERE rno = #{rno}
	</delete>
	
	<update id="replyCntUpdate" parameterType="int">
		UPDATE tbl_board
		<if test="flag == 'plus'">
			SET replycnt = replycnt + 1
		</if>
		<if test="flag == 'minus'">
			SET replycnt = replycnt - 1
		</if>
		WHERE bno = #{bno}
	</update>
	
	<insert id="boardInsert" parameterType="com.one.dto.BoardDTO">
		INSERT INTO tbl_board(bno, title, content, writer, filename, filesize)
		VALUES(seq_board.NEXTVAL, #{title}, #{content}, #{writer}, #{filename}, #{filesize})
	</insert>
	
	<delete id="boardDelete" parameterType="int">
		DELETE FROM tbl_board
		WHERE bno = #{bno}
	</delete>
	
	<update id="modifyBoard" parameterType="com.one.dto.BoardDTO">
		UPDATE tbl_board
		SET title = #{title},
			content = #{content},
			filename = #{filename},
			filesize = #{filesize}
		WHERE bno = #{bno}
	</update>
	<select id="ckeckLike" parameterType="com.one.dto.LikeDTO" resultType="com.one.dto.LikeDTO">
		SELECT * FROM tbl_like
		WHERE bno = #{bno}
		AND	  id = #{id}
	</select>
	<insert id="insertLike" parameterType="com.one.dto.LikeDTO">
		INSERT INTO tbl_like(bno, id)
		VALUES(#{bno}, #{id})
	</insert>
	<delete id="deleteLike" parameterType="com.one.dto.LikeDTO">
		DELETE FROM tbl_like
		WHERE bno = #{bno}
		AND	  id = #{id}
	</delete>
	<select id="selectLike" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM tbl_like
		WHERE bno = #{bno}
	</select>
	<update id="updateLikeCnt" parameterType="com.one.dto.BoardDTO">
		UPDATE tbl_board
		SET goodcnt = #{goodcnt}
		WHERE bno = #{bno}
	</update>
</mapper>